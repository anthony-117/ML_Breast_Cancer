install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
mpg
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Create interactive plot
fig <- plot_ly() %>%
add_trace(x = epochs, y = true_values, type = 'scatter', mode = 'lines', name = 'True Values') %>%
add_trace(x = epochs, y = predictions, type = 'scatter', mode = 'lines+markers', name = 'Predictions') %>%
layout(title = "Neural Network Predictions Over Epochs",
xaxis = list(title = "Epochs"),
yaxis = list(title = "Prediction Value"))
library(tidyverse)
# Create interactive plot
fig <- plot_ly() %>%
add_trace(x = epochs, y = true_values, type = 'scatter', mode = 'lines', name = 'True Values') %>%
add_trace(x = epochs, y = predictions, type = 'scatter', mode = 'lines+markers', name = 'Predictions') %>%
layout(title = "Neural Network Predictions Over Epochs",
xaxis = list(title = "Epochs"),
yaxis = list(title = "Prediction Value"))
library(plotly)
# Simulated data: Predictions changing over 50 epochs
epochs <- 1:50
true_values <- sin(epochs / 10) # Simulated true values
predictions <- sin(epochs / 10) + rnorm(50, mean = 0, sd = 0.1) # Noisy predictions
# Create interactive plot
fig <- plot_ly() %>%
add_trace(x = epochs, y = true_values, type = 'scatter', mode = 'lines', name = 'True Values') %>%
add_trace(x = epochs, y = predictions, type = 'scatter', mode = 'lines+markers', name = 'Predictions') %>%
layout(title = "Neural Network Predictions Over Epochs",
xaxis = list(title = "Epochs"),
yaxis = list(title = "Prediction Value"))
fig
install.packages("shiny")
library(shiny)
ui <- fluidPage(
titlePanel("Neural Network Training Progress"),
sidebarLayout(
sidebarPanel(
sliderInput("epoch", "Select Epoch:", min = 1, max = 50, value = 1)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
epochs <- 1:50
true_values <- sin(epochs / 10)
predictions <- sin(epochs / 10) + rnorm(50, mean = 0, sd = 0.1)
plot(epochs, true_values, type = "l", col = "blue", lwd = 2, ylim = c(-1, 1),
xlab = "Epochs", ylab = "Prediction Value", main = "Training Progress")
points(epochs[1:input$epoch], predictions[1:input$epoch], col = "red", pch = 19)
lines(epochs[1:input$epoch], predictions[1:input$epoch], col = "red", lwd = 2)
legend("topright", legend = c("True Values", "Predictions"), col = c("blue", "red"), lty = 1, pch = 19)
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(gifski)
install.packages("gifski")
install.packages("gifski")
setwd("")
setwd("/home/anthony/Desktop/ML/ML_Breast_Cancer/project2")
source("dataset_creation.R")
source("NN_simple.R")
source("plots.R")
dataset <- read.csv("sine_wave_dataset_preprocess.csv")
raw_dataset <- read.csv("sine_wave_dataset.csv")
dataset <- dataset %>%
filter(X < 3 & X > -3)
X <- as.matrix(dataset$X)
Y <- as.matrix(dataset$Y)
nn <- NN.create(X, Y, c(30, 20, 10))
epochs <- 10000
# # result <- NN.train(nn, X, Y, epochs = epochs, learning_rate = 0.01, momentum = 0.9)
# result <- NN.train(nn, X, Y, epochs=epochs, learning_rate=0.01,
#                        batch_type="mini", batch_size = 64, optimizer = "adagrad", verbose=TRUE)
result <- NN.train(nn, X, Y, epochs=10000, learning_rate=0.01, momentum=0.2,
batch_type="full", batch_size=20, verbose=TRUE)
# # result <- NN.train(nn, X, Y, epochs = epochs, learning_rate = 0.01, momentum = 0.9)
result <- NN.train(nn, X, Y, epochs=epochs, learning_rate=0.01,
batch_type="stochastic", batch_size = 64, optimizer = "sgd", verbose=TRUE)
source("NN.R")
source("plots.R")
dataset <- read.csv("sine_wave_dataset_preprocess.csv")
raw_dataset <- read.csv("sine_wave_dataset.csv")
dataset <- dataset %>%
filter(X < 3 & X > -3)
X <- as.matrix(dataset$X)
Y <- as.matrix(dataset$Y)
nn <- NN.create(X, Y, c(30, 20, 10))
epochs <- 10000
# # result <- NN.train(nn, X, Y, epochs = epochs, learning_rate = 0.01, momentum = 0.9)
result <- NN.train(nn, X, Y, epochs=epochs, learning_rate=0.01,
batch_type="stochastic", batch_size = 64, optimizer = "sgd", verbose=TRUE)
save(result, file = "models/30x20x10_sgd_stochastic.RData")
# result <- NN.train(nn, X, Y, epochs=10000, learning_rate=0.01, momentum=0.2,
#                        batch_type="full", batch_size=20, verbose=TRUE)
# result <- NN.train(nn, X, Y, epochs=1000, learning_rate=0.1, momentum=0.9,
#                    batch_type="stochastic", batch_size=20, verbose=TRUE)
NN.trained <- result$NN
X.predict <- seq(0, 10, by = 0.1)
nn <- NN.trained
source("NN.R")
NN.predict(nn, X.predict, verbose = TRUE)
NN.predict.periodic(nn, X.predict)
NN.predict(nn, X.predict, verbose = TRUE)
